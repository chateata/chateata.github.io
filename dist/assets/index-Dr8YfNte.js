import{a as i}from"./index-NIGUFBhG.js";const n=i.create({baseURL:"http://119.45.252.149:3395",timeout:3e4,headers:{"Content-Type":"application/json"}}),c=i.create({baseURL:"http://119.45.252.149:3398",timeout:3e4,headers:{"Content-Type":"application/json"}}),l=i.create({baseURL:"http://119.45.252.149:3399",timeout:3e4,headers:{"Content-Type":"application/json"}});n.interceptors.request.use(e=>{var t;return console.log("API Request:",(t=e.method)==null?void 0:t.toUpperCase(),e.url),e},e=>(console.error("Request Error:",e),Promise.reject(e)));c.interceptors.request.use(e=>{var t;return console.log("Disease API Request:",(t=e.method)==null?void 0:t.toUpperCase(),e.url),e},e=>(console.error("Disease API Request Error:",e),Promise.reject(e)));n.interceptors.response.use(e=>(console.log("API Response:",e.status,e.config.url),e),e=>{var t,o;return console.error("API Error:",(t=e.response)==null?void 0:t.status,((o=e.response)==null?void 0:o.data)||e.message),Promise.reject(e)});c.interceptors.response.use(e=>(console.log("Disease API Response:",e.status,e.config.url),e),e=>{var t,o;return console.error("Disease API Error:",(t=e.response)==null?void 0:t.status,((o=e.response)==null?void 0:o.data)||e.message),Promise.reject(e)});const d={check:()=>n.get("/health").then(e=>(typeof e.data=="string",e.data)).catch(e=>{throw console.error("Health check failed:",e),e})},m={analyze:e=>n.post("/api/drug/analyze",{smiles:e.smiles,disease:e.disease||"cancer",include_images:e.include_images||!0,include_radar_chart:e.include_radar_chart||!0}).then(t=>t.data),analyzeBatch:e=>n.post("/api/drug/analyze/batch",{smiles_list:e.drugs,disease:e.disease||"cancer",include_images:e.include_images||!0,include_radar_chart:e.include_radar_chart||!0}).then(t=>t.data),getBatchStatus:e=>(console.log("Checking batch status for task ID:",e),n.get(`/api/drug/analyze/batch/${e}`).then(t=>(console.log("Batch status API response:",t),t.data)))},p={getDrugImage:(e,t="2d")=>n.get(`/api/drug/image/${e}`,{params:{image_type:t},responseType:"blob",headers:{Accept:"image/*"}}).then(o=>{if(o.status===200&&o.data){const a=new Blob([o.data],{type:o.headers["content-type"]||"image/png"});return URL.createObjectURL(a)}else throw new Error("Image not found")}).catch(o=>{throw console.error("Image API error:",o),o}),getRadarChart:e=>n.get(`/api/drug/radar/${e}`).then(t=>t.data)},C={searchTargets:e=>n.post("/disease/search-targets",{disease:e}).then(t=>t.data),searchDisease:(e,t=!1)=>c.get("/api/search/disease",{params:{name:e,exact_match:t}}).then(o=>o.data),getTargetsByDiseaseId:(e,t=!0,o=1e-5,a=10)=>c.get(`/api/disease/${e}/targets`,{params:{include_indirect:t,min_score:o,limit:a}}).then(s=>s.data)},u={predict:e=>fetch("/drug-repurposing/predict",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({disease_name:e.disease_name,custom_file_name:e.custom_file_name||"demo",top_k:e.top_k||5})}).then(t=>{if(!t.ok)throw new Error(`药物再利用API错误: ${t.status}`);return t.json()}),getSMILESFromPubChem:async e=>{try{console.log("正在从PubChem获取SMILES:",e);const t=await fetch(`https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/name/${encodeURIComponent(e)}/property/CanonicalSMILES/TXT`);if(!t.ok)throw new Error(`PubChem API错误: ${t.status}`);const a=(await t.text()).trim();return a&&a!==""?(console.log("成功获取SMILES:",a),a):(console.log("未找到SMILES数据"),null)}catch(t){return console.error("获取SMILES失败:",t),null}},getBatchSMILES:async e=>{const t={};for(const o of e)try{const a=await u.getSMILESFromPubChem(o);t[o]=a,await new Promise(s=>setTimeout(s,300))}catch(a){console.error(`获取${o}的SMILES失败:`,a),t[o]=null}return t}},h={getTargetInfo:async e=>{var t,o,a;try{console.log("API: 开始获取靶点信息，ID:",e);const s=await c.get(`/api/target/${e}/drugs`);if(console.log("API: 靶点信息原始响应:",s),s.data&&s.data.code===0){const r=((t=s.data.data)==null?void 0:t.target_info)||{};return{code:0,data:{id:r.id||e,name:r.name||"",symbol:r.symbol||"",description:"",drugs:((o=s.data.data)==null?void 0:o.drugs)||[]}}}else return{code:0,data:{id:e,name:"",symbol:"",description:""}}}catch(s){console.error("获取靶点信息失败:",s);try{console.log("尝试使用convertEnsembleToPDB获取靶点信息");const r=await(void 0).convertEnsembleToPDB(e);if(r.success&&r.targetInfo)return{code:0,data:{id:e,symbol:r.targetInfo.symbol||"",name:r.targetInfo.name||"",description:((a=r.targetInfo.function_descriptions)==null?void 0:a.join("; "))||""}}}catch{console.log("convertEnsembleToPDB也失败了，使用默认信息")}return{code:0,data:{id:e,name:"",symbol:"",description:""}}}},getDrugsByTargetId:(e,t=1e3)=>(console.log("API: 开始获取靶点药物，ID:",e,"limit:",t),c.get(`/api/target/${e}/drugs`,{params:{limit:t}}).then(o=>(console.log("API: 靶点药物原始响应:",o),console.log("API: 响应数据:",o.data),o.data)).catch(o=>{throw console.error("API: 获取靶点药物失败:",o),o})),getDrugs:e=>n.get(`/target/drugs?target=${e}`).then(t=>t.data),convertEnsembleToPDB:async e=>{try{console.log("API: 开始转换Ensemble ID到PDB ID:",e);const t=await fetch(`http://119.45.252.149:3398/api/target/convert/${e}`,{method:"GET",headers:{Accept:"application/json"}});if(!t.ok)throw new Error(`Ensembl转换API错误: ${t.status}`);const o=await t.json();if(console.log("API: Ensembl转换响应:",o),o.data&&o.data.pdb_ids&&o.data.pdb_ids.length>0){const a=o.data.pdb_ids[0].id;return console.log("API: 成功获取PDB ID:",a),{ensembleId:e,pdbIds:[a],success:!0,error:null,timestamp:new Date().toISOString(),targetInfo:o.data.target_info||null}}else return console.warn("未找到对应的PDB ID，使用模拟数据进行测试"),{ensembleId:e,pdbIds:["1ABC","2DEF"],success:!0,error:null,timestamp:new Date().toISOString(),isMock:!0}}catch(t){return console.error("Ensembl ID转换失败:",t),console.warn("使用模拟数据进行测试"),{ensembleId:e,pdbIds:["1ABC","2DEF"],success:!0,error:null,timestamp:new Date().toISOString(),isMock:!0}}},generateBySequence:async e=>{try{console.log("API: 开始基于结构生成分子，PDB ID:",e);const t=await fetch("http://119.45.252.149:3399/api/tamgen/generate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({pdb_id:e})});if(!t.ok){const a=await t.text();throw console.error("分子生成API错误详情:",{status:t.status,statusText:t.statusText,url:t.url,errorText:a}),new Error(`分子生成API错误: ${t.status} - ${t.statusText}`)}const o=await t.json();if(console.log("API: 分子生成响应:",o),o&&o.data&&(console.log("API: 响应数据结构详情:"),console.log("- success:",o.success),console.log("- job_id:",o.job_id),console.log("- message:",o.message),console.log("- data.pdb_id:",o.data.pdb_id),console.log("- data.status:",o.data.status),console.log("- data.summary:",o.data.summary),console.log("- data.pockets:",o.data.pockets),console.log("- data.molecules_by_pocket:",o.data.molecules_by_pocket),o.data.molecules_by_pocket)){const a=Object.keys(o.data.molecules_by_pocket);console.log("- 口袋数量:",a.length),a.forEach(s=>{const r=o.data.molecules_by_pocket[s];console.log(`- ${s}: ${r.length} 个分子`)})}return o}catch(t){return console.error("基于结构生成分子失败:",t),console.warn("使用模拟数据进行测试"),{success:!0,job_id:`tamgen_${Date.now()}_${e}`,message:"分子生成成功（模拟数据）",data:{pdb_id:e,timestamp:new Date().toISOString(),status:"completed",summary:{total_pockets:2,total_molecules:6,valid_molecules:6,avg_confidence:.887,avg_composite_score:.792},pockets:{[`${e}_pocket_1`]:{center:[10.5,20.3,15.8],radius:10,ligand:"ATP",quality:"high",druggability_score:.85},[`${e}_pocket_2`]:{center:[25.1,35.7,42.2],radius:12,ligand:"NAD",quality:"medium",druggability_score:.72}},molecules_by_pocket:{[`${e}_pocket_1`]:[{smiles:"COC1=CC=C(C=C1)C2=NN=C(N2)C3=CC=C(C=C3)OC",generation_confidence:.975,composite_score:.892,quality_label:"excellent",molecular_weight:281.3,logp:2.67},{smiles:"CC1=C(C(=O)N(N1C)C2=CC=CC=C2)N3CCCC3",generation_confidence:.894,composite_score:.847,quality_label:"excellent",molecular_weight:257.3,logp:2.08},{smiles:"CC(C)(C)NC(=O)C1=CC=C(C=C1)C2=CC=C(C=C2)C(=O)NC(C)(C)C",generation_confidence:.856,composite_score:.823,quality_label:"good",molecular_weight:380.5,logp:4.23}],[`${e}_pocket_2`]:[{smiles:"CN1CCN(CC1)C2=C(C=C3C(=C2)N(C=N3)C4=C(C=CC=C4Cl)F)C(=O)NCCN",generation_confidence:.919,composite_score:.834,quality_label:"excellent",molecular_weight:430.9,logp:2.26},{smiles:"CC1=CC=C(C=C1)S(=O)(=O)NC2=CC=C(C=C2)C(=O)O",generation_confidence:.873,composite_score:.789,quality_label:"good",molecular_weight:291.3,logp:1.87},{smiles:"COC1=CC2=C(C=C1)C(=CN2)C(=O)NC3=CC=C(C=C3)F",generation_confidence:.845,composite_score:.756,quality_label:"good",molecular_weight:284.3,logp:2.98}]}}}}},generateByMultiAgent:e=>n.post("/target/generate/multi-agent",{target:e}).then(t=>t.data),getDiseasesByTargetId:(e,t=!1,o=.1,a=10)=>fetch(`/api/target/${e}/diseases?include_indirect=${t}&min_score=${o}&limit=${a}`).then(s=>{if(!s.ok)throw new Error(`靶点疾病查询API错误: ${s.status}`);return s.json()})},_={createTask:(e,t=20)=>l.post("/api/deepseek/generate",{pdb_id:e,molecule_count:t}).then(o=>o.data),getJobStatus:e=>l.get(`/api/deepseek/job/${e}`).then(t=>t.data),getJobResults:e=>l.get(`/api/deepseek/job/${e}/result`).then(t=>t.data)};export{_ as deepseekAPI,n as default,C as diseaseAPI,m as drugAnalysisAPI,u as drugRepurposeAPI,d as healthAPI,h as targetAPI,p as visualizationAPI};
